# Using version 3 to provide play-with-docker badge
# You can change to version 2 without breaking.
#version: '2'
version: '3'
services:
  database:
    # Don't upgrade PostgreSQL by simply changing the version number
    # You need to migrate the Database to the new PostgreSQL version
    image: postgres:9.6-alpine
    #mem_limit: 256mb         # version 2 only
    #memswap_limit: 512mb     # version 2 only
    #read_only: true          # not supported in swarm mode please enable along with tmpfs
    #tmpfs:
    #  - /run/postgresql:size=512K
    #  - /tmp:size=256K
    environment:
      - POSTGRES_USER=hackmd
      - POSTGRES_PASSWORD=hackmdpass
      - POSTGRES_DB=hackmd
    volumes:
      - database:/var/lib/postgresql/data
    networks:
      backend:
    restart: always

  # Minio will be used as S3 Provider for image uploads
  imagestore:
    image: minio/minio:RELEASE.2019-05-02T19-07-09Z
    restart: always
    volumes:
      - minio:/data
    environment:
      - MINIO_ACCESS_KEY=randomCodiMDKey
      - MINIO_SECRET_KEY=randomCodiMDSecret
    #mem_limit: 256mb         # version 2 only
    #memswap_limit: 512mb     # version 2 only
    #read_only: true          # not supported in swarm mode please enable along with tmpfs
    #tmpfs:
    #  - /run/minio:size=512K
    #  - /tmp:size=256K
    # Normally this requires to manually create a bucket
    # but with the command it will automatically create a bucket
    command: -c 'mkdir -p /data/codimd && minio server /data'
    networks:
      backend:
      web:
    labels:
       # This should be the external domain you want to use for Minio
      - treafik.enabled=true
      - traefik.frontend.rule=Host:minio.example.org
      - traefik.port=9000
      - traefik.docker.network=web  

  # MySQL example
  # Most of the documentation that applies to PostgreSQL applies also to MySQL
  #database:
  #    # You should be able to upgrade MySQL without problems
  #    # but to make sure no even when a problem appears you
  #    # should have a backup
  #    image: mariadb:10
  #    environment:
  #      - MYSQL_USER=hackmd
  #      - MYSQL_PASSWORD=hackmdpass
  #      - MYSQL_DATABASE=hackmd
  #      - MYSQL_ALLOW_EMPTY_PASSWORD=true
  #    volumes:
  #      - database:/var/lib/mysql
  #      # This config provides UTF-8 support to the database by default
  #      # If this config is not used, HackMD breaks as it tries to write
  #      # UTF-8 to a latin database.
  #      - ./resources/utf8.cnf:/etc/mysql/conf.d/utf8.cnf
  #    networks:
  #      backend:
  #    restart: always

  app:
    # Uncomment the following section to build the image yourself:
    #build:
    #  context: .
    #  dockerfile: debian/Dockerfile
    #  args:
    #    - "VERSION=master"
    #    - "CODIMD_REPOSITORY=https://github.com/codimd/server.git"
    image: quay.io/codimd/server:1.3.2
    #mem_limit: 256mb         # version 2 only
    #memswap_limit: 512mb     # version 2 only
    #read_only: true          # not supported in swarm mode, enable along with tmpfs
    #tmpfs:
    #  - /tmp:size=512K
    #  - /codimd/tmp:size=1M
    #  # Make sure you remove this when you use filesystem as upload type
    #  - /codimd/public/uploads:size=10M
    environment:
      # DB_URL is formatted like: <databasetype>://<username>:<password>@<hostname>/<database>
      # Other examples are:
      # - mysql://hackmd:hackmdpass@database:3306/hackmd
      # - sqlite:///data/sqlite.db (NOT RECOMMENDED)
      # - For details see the official sequelize docs: http://docs.sequelizejs.com/en/v3/
      - CMD_DB_URL=postgres://hackmd:hackmdpass@database:5432/hackmd
      # Minio S3 Configuration
      - CMD_IMAGE_UPLOAD_TYPE=minio
      - CMD_S3_BUCKET=codimd
      - CMD_MINIO_ACCESS_KEY=randomCodiMDKey
      - CMD_MINIO_SECRET_KEY=randomCodiMDSecret
      - CMD_MINIO_ENDPOINT=imagestore
      - CMD_MINIO_PORT=9000
      - CMD_MINIO_SECURE=false
    labels:
      # This should be the external domain you want to use for CodiMD
      - treafik.enabled=true
      - traefik.frontend.rule=Host:codimd.example.org
      - traefik.port=3000
      - traefik.docker.network=web
    # Alternatively if you don't want to use the traefik reverse proxy you can publish
    # CodiMD directly with a port as explained below
    #ports:
      # Ports that are published to the outside.
      # The latter port is the port inside the container. It should always stay on 3000
      # If you only specify a port it'll published on all interfaces. If you want to use a
      # local reverse proxy, you may want to listen on 127.0.0.1.
      # Example:
      # - "127.0.0.1:3000:3000"
      #- "3000:3000"
    networks:
      backend:
      web:
    restart: always
    depends_on:
      - database
      - imagestore
  reverseproxy:
  # traefik is used as reverse proxy for CodiMD
  # It automatically listens on docker for exposed services
  # in the web network
    image: traefik:1.7-alpine
    restart: always
    networks:
      - web
    #mem_limit: 256mb         # version 2 only
    #memswap_limit: 512mb     # version 2 only
    #read_only: true          # not supported in swarm mode please enable along with tmpfs
    #tmpfs:
    #  - /run/traefik:size=512K
    #  - /tmp:size=256K
    # It is required to replace the email placeholder here for
    # Let's Encrypt to work
    command: >
      "-c /dev/null --docker "
      "--acme --acme.email=###email-address### "
      "--acme.storage=/etc/traefik/acme/acme.json --acme.onhostrule "
      "--entryPoints='Name:http Address::80 Redirect.EntryPoint:https' "
      "--entryPoints='Name:https Address::443 Compress:true TLS' "
      "--defaultentrypoints=http,https --docker.exposedbydefault=false"
    ports:
      # These ports should be exported to the network.
      # By default HTTPS will use self-signed certificates
      # but with some extra configuration traefik can automatically request
      # Let's Encrypt certificates:
      # https://docs.traefik.io/configuration/acme/
      # Example:
      # - "127.0.0.1:80:80"
      - 80:80
      - 443:443
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - acme:/etc/traefik/acme


# Define networks to allow best isolation
networks:
  # Internal network for communication with PostgreSQL/MySQL
  backend:
  # Network that includes components that will be exported
  web:

# Define named volumes so data stays in place
volumes:
  # Volume for PostgreSQL/MySQL database
  database: {}
  minio: {}
  acme: {}
